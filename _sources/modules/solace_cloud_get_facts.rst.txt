:github_url: https://github.com/solace-iot-team/ansible-solace-collection/tree/main/src/ansible_collections/solace/pubsub_plus/plugins/modules/solace_cloud_get_facts.py

.. _solace_cloud_get_facts_module:

solace_cloud_get_facts -- get Solace Cloud service facts
========================================================

Convenience functions to access Solace Cloud service facts gathered with :ref:`solace_cloud_get_service <solace_cloud_get_service_module>` or returned by :ref:`solace_cloud_service <solace_cloud_service_module>`.

Always returns the state of the service in `facts.serviceState`.




Examples
--------

.. code-block:: yaml+jinja

   
   hosts: all
   gather_facts: yes
   any_errors_fatal: true
   collections:
   - solace.pubsub_plus
   tasks:
     - set_fact:
         api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"

     - name: get a list of all services in the account
       solace_cloud_get_services:
         api_token: "{{ api_token }}"
       register: result

     - name: save first service in list
       set_fact:
         sc_service: "{{ result.result_list[0] }}"

     - name: get all details for first service in list
       solace_cloud_get_service:
         api_token: "{{ api_token }}"
         service_id: "{{ sc_service.serviceId }}"
       register: result

     - name: save service details
       set_fact:
         sc_service_details: "{{ result.service }}"

     - name: save details to file
       copy:
         content: "{{ sc_service_details | to_nice_json }}"
         dest: "./solace_cloud_service.{{ sc_service.name }}.details.json"
       delegate_to: localhost

     - name: get local host inventory for service
       solace_cloud_get_facts:
         from_dict: "{{ sc_service_details }}"
         get_formattedHostInventory:
           host_entry: "{{ sc_service.name }}"
           api_token: "{{ api_token }}"
           meta:
             service_name: "{{ sc_service_details.name }}"
             service_id: "{{ sc_service_details.serviceId }}"
             datacenterId: "{{ sc_service_details.datacenterId }}"
             eventBrokerVersion: "{{ sc_service_details.eventBrokerVersion }}"
             serviceTypeId: "{{ sc_service_details.serviceTypeId}}"
             serviceClassId: "{{ sc_service_details.serviceClassId }}"
             serviceClassDisplayedAttributes: "{{ sc_service_details.serviceClassDisplayedAttributes }}"
       register: result

     - name: get remote host inventory for service
       solace_cloud_get_facts:
         from_dict: "{{ sc_service_details }}"
         get_remoteFormattedHostInventory:
           # load the inventory file ansible-playbook was called with
           remote_host_inventory: "{{ lookup('file', inventory_file) | from_json }}"
           # extract the current inventory_hostname from it
           remote_host_inventory_hostname: "{{ inventory_hostname }}"
           host_entry: "{{ sc_service.name }}"
           api_token: "{{ api_token }}"
           meta:
             service_name: "{{ sc_service_details.name }}"
             service_id: "{{ sc_service_details.serviceId }}"
             datacenterId: "{{ sc_service_details.datacenterId }}"
             eventBrokerVersion: "{{ sc_service_details.eventBrokerVersion }}"
             serviceTypeId: "{{ sc_service_details.serviceTypeId}}"
             serviceClassId: "{{ sc_service_details.serviceClassId }}"
             serviceClassDisplayedAttributes: "{{ sc_service_details.serviceClassDisplayedAttributes }}"
       register: remote_result
       delegate_to: localhost

     - name: save new service local inventory to file
       copy:
         content: "{{ result.facts.formattedHostInventory | to_nice_yaml }}"
         dest: "./local.inventory.{{ sc_service.name }}.yml"
       delegate_to: localhost

     - name: save new service remote inventory to file
       copy:
         content: "{{ result.facts.remoteFormattedHostInventory | to_nice_yaml }}"
         dest: "./remote.inventory.{{ sc_service.name }}.yml"
       delegate_to: localhost

     - name: extract the service facts
       set_fact:
         inventory_facts: "{{ result.facts.formattedHostInventory.all.hosts[sc_service.name] }}"

     - name: set semp connection facts
       set_fact:
         sempv2_host: "{{ inventory_facts.sempv2_host }}"
         sempv2_port: "{{ inventory_facts.sempv2_port }}"
         sempv2_is_secure_connection: "{{ inventory_facts.sempv2_is_secure_connection }}"
         sempv2_username: "{{ inventory_facts.sempv2_username }}"
         sempv2_password: "{{ inventory_facts.sempv2_password }}"
         sempv2_timeout: "{{ inventory_facts.sempv2_timeout }}"
         vpn: "{{ inventory_facts.vpn }}"

     - name: gather facts for service
       solace_gather_facts:
         host: "{{ sempv2_host }}"
         port: "{{ sempv2_port }}"
         secure_connection: "{{ sempv2_is_secure_connection }}"
         username: "{{ sempv2_username }}"
         password: "{{ sempv2_password }}"
         timeout: "{{ sempv2_timeout }}"
         solace_cloud_api_token: "{{ api_token }}"
         solace_cloud_service_id: "{{ sc_service.serviceId }}"

     - name: retrieve all client connection details
       solace_get_facts:
         hostvars: "{{ hostvars }}"
         hostvars_inventory_hostname: "{{ inventory_hostname }}"
         msg_vpn: "{{ vpn }}"
         get_functions:
           - get_allClientConnectionDetails
       register: result

     - name: save connection details
       set_fact:
         client_connection_details: "{{ result.facts }}"

     - name: save connection details to file
       copy:
         content: "{{ client_connection_details | to_nice_json }}"
         dest: "./facts.solace_cloud_service.{{ sc_service.name }}.client_connection_details.json"
       delegate_to: localhost





See Also
--------

.. seealso::

   - :ref:`solace_cloud_get_service_module`
   - :ref:`solace_cloud_service_module`
   - :ref:`solace_gather_facts_module`
   - :ref:`solace_get_facts_module`



Parameters
----------

from_dict (required)
  The JSON object (dict) which holds the service facts. Could be the result of :ref:`solace_cloud_get_service <solace_cloud_get_service_module>` or :ref:`solace_cloud_service <solace_cloud_service_module>` (state=present).


  | **type**: dict

get_formattedHostInventory (optional)
  Get the facts formatted as a local host inventory. Retrieve the inventory field by field or save to file and use in subsequent playbooks as an inventory.


  | **type**: dict

  api_token (optional)
    The API token to access the Solace Cloud Service API.

    | **type**: str

  host_entry (required)
    The entry for this broker / service in the hosts file. Must be a valid JSON key.

    | **type**: str

  meta (required)
    Additional meta data describing the service instance.

    | **type**: dict


get_remoteFormattedHostInventory (optional)
  Get the facts formatted as a remote host inventory. Retrieve the inventory field by field or save to file and use in subsequent playbooks as an inventory.


  | **type**: dict

  api_token (optional)
    The API token to access the Solace Cloud Service API.

    | **type**: str

  host_entry (required)
    The entry for this broker / service in the hosts file. Must be a valid JSON key.

    | **type**: str

  meta (required)
    Additional meta data describing the service instance.

    | **type**: dict

  remote_host_inventory (required)
    The inventory that contains the entry for the remote host.

    | **type**: dict

  remote_host_inventory_hostname (required)
    The host entry in ``remote_host_inventory`` to extract the inventory parameters from.

    | **type**: str






Return Values
-------------

rc
  Return code. rc=0 on success, rc=1 on error.

  | **returned**: always
  | **type**: int
  | **sample**:

  .. code-block:: json

     {
     "error": {
       "rc": 1
     },
     "success": {
       "rc": 0
     }
   }

msg
  error message if not ok

  | **returned**: error
  | **type**: str

facts
  The facts retrieved from the input.

  | **returned**: success
  | **type**: dict
  | **sample**:

  .. code-block:: json

     {
     "formattedHostInventory": {
       "all": {
         "hosts": {
           "asc_test_1": {
             "ansible_connection": "local",
             "broker_type": "solace_cloud",
             "meta": {
               "datacenterId": "aws-ca-central-1a",
               "eventBrokerVersion": "9.6",
               "serviceClassDisplayedAttributes": {
                 "Clients": "250",
                 "High Availability": "HA Group",
                 "Message Broker Tenancy": "Dedicated",
                 "Network Speed": "450 Mbps",
                 "Network Usage": "50 GB per month",
                 "Queues": "250",
                 "Storage": "25 GB"
               },
               "serviceClassId": "enterprise-250-nano",
               "serviceTypeId": "enterprise",
               "service_id": "1n34cqfh9i7x",
               "service_name": "asc_test_1"
             },
             "sempv2_host": "mr1n34cqfh9i8x.messaging.solace.cloud",
             "sempv2_is_secure_connection": true,
             "sempv2_password": "hihqxxx92sa3bc2sphtp3nl",
             "sempv2_port": 943,
             "sempv2_timeout": "60",
             "sempv2_username": "asc_test_1-admin",
             "solace_cloud_service_id": "1n34cqfh9i7x",
             "virtual_router": "primary",
             "vpn": "asc_test_1"
           }
         }
       }
     },
     "remoteFormattedHostInventory": {
       "all": {
         "hosts": {
           "asct_sc_bastion_1": {
             "ansible_become": true,
             "ansible_host": "104.214.217.165",
             "ansible_python_interpreter": "/usr/bin/python3",
             "ansible_user": "asct-devel-bastion",
             "broker_type": "solace_cloud",
             "meta": {
               "datacenterId": "aws-ca-central-1a",
               "eventBrokerVersion": "9.6",
               "sc_service_id": "7t8h5axsy5r",
               "serviceClassDisplayedAttributes": {
                 "Clients": "250",
                 "High Availability": "HA Group",
                 "Message Broker Tenancy": "Dedicated",
                 "Network Speed": "450 Mbps",
                 "Network Usage": "50 GB per month",
                 "Queues": "250",
                 "Storage": "25 GB"
               },
               "serviceClassId": "enterprise-250-nano",
               "serviceTypeId": "enterprise",
               "service_name": "asct_sc_bastion_1"
             },
             "sempv2_host": "mr6jrt3zdpf5n.messaging.solace.cloud",
             "sempv2_is_secure_connection": true,
             "sempv2_password": "eo0v8ptme0k9ha96qpc5661ac8",
             "sempv2_port": 943,
             "sempv2_timeout": "60",
             "sempv2_username": "asct_sc_bastion_1-admin",
             "solace_cloud_service_id": "7t8h5axsy5r",
             "virtual_router": "primary",
             "vpn": "asct_sc_bastion_1"
           }
         }
       }
     },
     "serviceState": "complete"
   }


