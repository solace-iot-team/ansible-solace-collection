:github_url: https://github.com/solace-iot-team/ansible-solace-collection/tree/main/src/ansible_collections/solace/pubsub_plus/plugins/modules/solace_jndi_queues.py

.. _solace_jndi_queues_module:

solace_jndi_queues -- manage a list of jndi queues
==================================================

Configure a list of JNDI Queue objects in a single transaction.

Allows addition and removal of a list of JNDI Queue objects as well as replacement of all existing JNDI Queue objects.

Supports 'transactional' behavior with rollback to original list in case of error.

De-duplicates JNDI Queue object list.

Reports which queues were added, deleted and omitted (duplicates). In case of an error, reports the invalid JNDI Queue object.

To delete all JNDI Queue objects, use state='exactly' with an empty/null list (see examples).




Examples
--------

.. code-block:: yaml+jinja

   
     hosts: all
     gather_facts: no
     any_errors_fatal: true
     collections:
       - solace.pubsub_plus
     module_defaults:
       solace_jndi_queues:
         host: "{{ sempv2_host }}"
         port: "{{ sempv2_port }}"
         secure_connection: "{{ sempv2_is_secure_connection }}"
         username: "{{ sempv2_username }}"
         password: "{{ sempv2_password }}"
         timeout: "{{ sempv2_timeout }}"
         msg_vpn: "{{ vpn }}"
     tasks:
     - name: add
       solace_jndi_queues:
         names:
         - bar_1
         - bar_2
         - bar_3
         settings:
           physicalName: foo
         state: present

     - name: replace old list with new list
       solace_jndi_queues:
         names:
         - bar_2
         - bar_3
         - bar_4
         settings:
           physicalName: foo
         state: exactly

     - name: delete one
       solace_jndi_queues:
         names:
         - bar_2
         state: absent

     - name: delete all
       solace_jndi_queues:
         names: null
         state: exactly



Notes
-----

.. note::
   - Module Sempv2 Config: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/jndi/createMsgVpnJndiQueue
   - Sempv2 Config Reference: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/
   - Sempv2 Monitor Reference: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/monitor/index.html#/
   - Sempv2 Action Reference: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/action/index.html#/
   - Updating the `settings` on a list is not supported.


See Also
--------

.. seealso::

   - :ref:`solace_jndi_queue_module`
   - :ref:`solace_get_jndi_queues_module`



Parameters
----------

host (optional)
  Hostname of Solace Broker.

  | **type**: str
  | **default**: localhost

msg_vpn (required)
  The message vpn.

  | **type**: str

names (required)
  The JNDI queue. Maps to 'queueName' in the SEMP v2 API.

  | **type**: list
  | **aliases**: queues, jndi_queues

password (optional)
  Administrator password for Solace Broker.

  | **type**: str
  | **default**: admin

port (optional)
  Management port of Solace Broker.

  | **type**: int
  | **default**: 8080

reverse_proxy (optional)
  Use a reverse proxy / api gateway. Note: **Experimental. Not permitted for Solace Cloud API**.

  | **type**: dict

  headers (optional)
    Additional headers to add to the http call. Example: 'apiKey: {my-api-key}'.

    | **type**: dict

    x-asc-module (optional)
      Flag for the module to add the header 'x-asc-module:{module-name}' to the http call with it's module name.

      | **type**: bool
      | **default**: False

    x-asc-module-op (optional)
      Flag for the module to add the header 'x-asc-module-op:{module operation}' to the http call with the module's operation.

      | **type**: bool
      | **default**: False


  query_params (optional)
    Additional query paramters to add to the URL. Example: 'apiCode: {my-api-code}'.

    | **type**: dict

  semp_base_path (optional)
    Base path prepended to all SEMP calls. Example: 'my/base/path'. Resulting URL will be: http(s)://{host}:{port}/{semp_base_path}/{module-semp-call-path}

    | **type**: str

  use_basic_auth (optional)
    Flag to use basic authentication in the http(s) call or not. Uses 'username'/'password'.

    | **type**: bool
    | **default**: False


secure_connection (optional)
  If true, use https rather than http.

  | **type**: bool
  | **default**: False

sempv2_settings (optional)
  JSON dictionary of additional configuration for the SEMP V2 API. See Reference documentation.

  | **type**: dict
  | **aliases**: settings

state (optional)
  Target state for CRUD list operation.

  | **type**: str
  | **default**: present
  | **choices**: present, absent, exactly

timeout (optional)
  Connection timeout in seconds for the http request.

  | **type**: int
  | **default**: 10

username (optional)
  Administrator username for Solace Broker.

  | **type**: str
  | **default**: admin

validate_certs (optional)
  Flag to switch validation of client certificates on/off when using a secure connection.

  | **type**: bool
  | **default**: True

x_broker (optional)
  Custom HTTP header with the broker virtual router id, if using a SEMPv2 Proxy/agent infrastructure.

  | **type**: str





Return Values
-------------

response
  The response of the operation.

  | **returned**: always
  | **type**: dict
  | **sample**:

  .. code-block:: json

     {
     "error": {
       "response": [
         {
           "error": "{the invalid queue name...}"
         }
       ]
     },
     "success": {
       "response": [
         {
           "added": "queue-1"
         },
         {
           "added": "queue-2"
         },
         {
           "added": "duplicate-queue"
         },
         {
           "deleted": "queue-3"
         },
         {
           "deleted": "queue-4"
         },
         {
           "duplicate": "duplicate-queue"
         }
       ]
     }
   }

msg
  The response from the HTTP call in case of error.

  | **returned**: error
  | **type**: dict

rc
  Return code. rc=0 on success, rc=1 on error.

  | **returned**: always
  | **type**: int
  | **sample**:

  .. code-block:: json

     {
     "error": {
       "rc": 1
     },
     "success": {
       "rc": 0
     }
   }


